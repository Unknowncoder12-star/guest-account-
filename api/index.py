from flask import Flask, request, jsonify
import sys
import os
import random
import string
import json
from datetime import datetime, timedelta
import logging 

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# Vercel-‡¶ï‡ßá ‡¶∞‡ßÅ‡¶ü ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶ö‡ßá‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§
# ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ XGE_core.py ‡¶¨‡¶æ XGE.py
try:
    # ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶∂‡ßÅ‡¶ß‡ßÅ XGE.py ‡¶π‡ßü, ‡¶§‡¶¨‡ßá XGE_core ‡¶è‡¶∞ ‡¶¨‡¶¶‡¶≤‡ßá XGE ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    from XGE_core import create_acc, REGION_URLS 
except ImportError:
    logging.error("ImportError: XGE_core.py (or XGE.py) not found or has errors.")
    def create_acc(region):
        return {"data": None, "status_code": 500, "uid": None, "password": None, "name": "IMPORT_ERROR"}
    REGION_URLS = {"ME": "ar"} # Default region for validation

app = Flask(__name__)

# --- Static Key Management Setup ---

# Env Vars ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
ADMIN_KEY = os.environ.get('ADMIN_KEY', 'DEFAULT-ADMIN-PASS') 
API_KEYS_JSON_STRING = os.environ.get('API_KEYS_JSON', '[]')
STATIC_KEYS = {} 

try:
    keys_list = json.loads(API_KEYS_JSON_STRING)
    for key_data in keys_list:
        key_str = key_data.get('key')
        if key_str:
            STATIC_KEYS[key_str] = {
                'limit': key_data.get('limit', float('inf')),
                'usage_count': 0, # Static Key System ‡¶è ‡¶è‡¶ü‡¶ø ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü 0 ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
                # Expiry date parsing: null ‡¶¨‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá None ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü
                'expiry_date': datetime.strptime(key_data['expiry_date'], '%Y-%m-%d') if key_data.get('expiry_date') and key_data['expiry_date'] is not None else None,
                'is_active': key_data.get('is_active', True)
            }
    logging.info(f"Loaded {len(STATIC_KEYS)} API keys from Environment Variable.")
except Exception as e:
    logging.error(f"FATAL: Error loading API_KEYS_JSON: {e}. Check if the JSON format is valid.")


# --- Helper Functions ---

def is_admin(req):
    auth_header = req.headers.get('Authorization')
    if not auth_header or auth_header != ADMIN_KEY:
        return False
    return True

# --- ‡ßß. ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∞‡ßÅ‡¶ü (‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø) ---
@app.route('/', methods=['GET'])
def handle_generation_request():
    if not STATIC_KEYS:
        return jsonify({"error": "No API Keys loaded. Contact admin to set API_KEYS_JSON correctly."}), 503

    # --- ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü URL ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ---
    api_key = request.args.get('key')
    region = request.args.get('region', '').upper()
    amount_str = request.args.get('amount', '1')

    # --- ‡ßß. ‡¶ï‡ßÄ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® ---
    key_data = STATIC_KEYS.get(api_key)

    if not api_key or not key_data:
        return jsonify({"error": "Invalid API key."}), 403

    if not key_data.get("is_active", True):
        return jsonify({"error": "This key has been disabled."}), 403

    # --- ‡ß®. ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡ßü‡¶æ‡¶∞ (Expiry) ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ö‡ßá‡¶ï ---
    expiry_date = key_data.get("expiry_date")
    if expiry_date and datetime.utcnow() > expiry_date:
        return jsonify({"error": "This key has expired."}), 403

    # --- ‡ß©. ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü (Limit) ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶ì ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶®‡¶æ‡¶≤ ‡¶∏‡ßá‡¶´‡¶ü‡¶ø ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ---
    limit = key_data.get("limit", float('inf')) 
    
    try:
        amount = int(amount_str)
        if amount < 1: amount = 1
        # üü¢ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá 100 ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        if amount > 100: amount = 100 
    except ValueError:
        amount = 1
        
    # Limit Check (Usage is always 0 in this static system)
    if 0 + amount > limit: 
        return jsonify({"error": f"Key limit exceeded. Limit is {limit}. Usage is not tracked without a database."}), 403

    # --- ‡ß™. ‡¶∞‡¶ø‡¶ú‡¶ø‡ßü‡¶® ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® ---
    if not region:
        return jsonify({"error": "Missing 'region' parameter. Example: ?region=ME"}), 400
    if region not in REGION_URLS:
         return jsonify({"error": f"Region '{region}' not supported."}), 400

    # --- ‡ß´. ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶≤‡ßÅ‡¶™ ---
    successful_accounts = []
    
    for i in range(amount):
        try:
            r = create_acc(region) 
            if r and r.get('data') and r.get('status_code') == 200:
                # üü¢ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ uid ‡¶è‡¶¨‡¶Ç password ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
                successful_accounts.append({
                    "uid": r.get("uid"),
                    "password": r.get("password")
                })
            # ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º
        except Exception as e:
            logging.error(f"Account creation failed: {e}")
    
    # --- ‡ß¨. ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶´‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã (‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü) ---
    # üü¢ ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü: ‡¶è‡¶ü‡¶ø‡¶á ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶Ø‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ü‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
    return jsonify(successful_accounts), 200


# --- ‡ß®. ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∞‡ßÅ‡¶ü (‡¶ï‡ßÄ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø - ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶≤ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶∂‡¶®) ---

def admin_instruction_response():
    """Admin routes now return instructions for manual Vercel configuration."""
    # JSON Parsing error ‡¶è‡¶°‡¶º‡¶æ‡¶§‡ßá keys() ‡¶ï‡ßá list() ‡¶è ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    current_keys_list = [{"key": k, "limit": v['limit']} for k,v in STATIC_KEYS.items()]
    
    return jsonify({
        "WARNING": "Database not in use. Key management is STATIC.",
        "ACTION_REQUIRED": "To CREATE, REMOVE, or UPDATE a key, you MUST manually edit the 'API_KEYS_JSON' Environment Variable in your Vercel Dashboard.",
        "Vercel_Path": "Vercel Project -> Settings -> Environment Variables",
        "JSON_Format_Example": [
            {
                "key": "MY_CUSTOM_KEY",
                "limit": 50,
                "expiry_date": "2025-12-31", 
                "is_active": True
            }
        ],
        "Current_Loaded_Keys": current_keys_list
    }), 200


@app.route('/admin/create_key', methods=['POST'])
@app.route('/admin/remove_key', methods=['POST'])
@app.route('/admin/update_key', methods=['POST'])
def admin_manual_update():
    if not is_admin(request):
        return jsonify({"error": "Access Denied. Invalid admin key."}), 401
    return admin_instruction_response()

@app.route('/admin/show_keys', methods=['GET'])
def show_all_keys():
    if not is_admin(request):
        return jsonify({"error": "Access Denied."}), 401
    
    if not STATIC_KEYS:
        return jsonify({"error": "No API Keys loaded."}), 503
        
    formatted_keys = []
    for k, v in STATIC_KEYS.items():
        formatted_keys.append({
            "key": k,
            "limit": v['limit'] if v['limit'] != float('inf') else "Unlimited",
            "is_active": v['is_active'],
            "expiry_date": v['expiry_date'].strftime('%Y-%m-%d') if v['expiry_date'] else "Never",
            "usage_tracked": "No (Static)"
        })
        
    return jsonify({"total_keys": len(formatted_keys), "keys": formatted_keys}), 200


# Vercel-‡¶è ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
if __name__ == "__main__":
    app.run()
